c
user
c
params[:city_id]
params[city_id]
params
@restaurant
c
User.find_each.count
user.save
User.find_each.count
c
User.find_each.count
User.find_each
user.save
User.find_each
User.find_each.count
c
User.find_each
user.errors.full_messages
user
usser
user.save
c
user.valid?
user.save
User.find_by_id 7
User.find_by_id user.id
User.find_each
user.name
user.save
c
User.find_each
User.find
user.save
u.save
c
User.find_each
u.save
u=User.new( email: "marcomaggio@mante.net", created_at: "2018-10-05 11:54:02", updated_at: "2018-10-05 11:54:02", name: "Dyan Boyer", phone_no: nil, home_add: nil, work_add: nil, typeofu: nil, avatar: nil, password: "123456")
user.errors.full_messages
user.save
c
user.errors.full_messages
User.find_each
User.find_all
user
user.save
c
@restaurant.save
c
@restaurant.errors.full_messages
@restaurant.save
c
@restaurant.errors.full_messages
@restaurant.save
c
@order.errors.full_messages
@order.save
@order
c
@restaurant.save
c
@restaurant.errors.full_messages
@restaurant.save
c
@restaurant.save
c
@restaurant.errors.full_messages
@restaurant.save
@restaurant.city=City.new
@restaurant.city='Pune'
@restaurant.city=City.first
@restaurant.city="Pune"
@restaurant.errors.full_messages
@restaurant.save
c
@order.errors.full_messages
Current.destroy_all
Item.last
@order.errors.full_messages
@order.save
c
@order.errors.full_messages
@order.save
c
@order.save
@order.user_id=2;
@order.save
@item.save
@item.save?
exit
Restaurant.new?
exit
c
current_user.confirm
current_user.confirmed
current_user.new_record?
current_user.typeofu == 'restaurant'
current_user.typeofucurrent_user.typeofu == 'restaurant'
current_user
current_user.typeofu
self.class
self
caller
.............................
.....................
c
rest.errors.to_a
rest.valid?
c
@item.errors.to_a
@item.save
c
@item.errors.to_a
@item.save
